name: Build APK from ZIP

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: /opt/android-sdk
      ANDROID_HOME: /opt/android-sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure apt tools
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl

      - name: Unzip Android project
        id: unzip
        shell: bash
        run: |
          set -e
          ZIP="LedLexusBT.zip"
          if [ ! -f "$ZIP" ]; then ZIP="$(ls -1 *.zip 2>/dev/null | head -n1)"; fi
          if [ -z "$ZIP" ]; then echo "Zip not found"; exit 1; fi
          rm -rf _src
          mkdir _src
          unzip -q "$ZIP" -d _src

          SETTINGS_FILE="$(find _src -maxdepth 3 -type f \( -name settings.gradle -o -name settings.gradle.kts \) | head -n1)"
          if [ -z "$SETTINGS_FILE" ]; then echo "settings.gradle(.kts) not found"; exit 1; fi
          PROJECT_DIR="$(dirname "$SETTINGS_FILE")"
          echo "PROJECT_DIR=$PROJECT_DIR" >> "$GITHUB_ENV"
          echo "Gradle project dir: $PROJECT_DIR"

      - name: Make gradlew executable (if present)
        shell: bash
        run: |
          if [ -f "${PROJECT_DIR}/gradlew" ]; then
            chmod +x "${PROJECT_DIR}/gradlew"
          fi

      - name: Patch repositories in settings.* if missing
        shell: bash
        env:
          SETTINGS_PATCH: |
            pluginManagement {
              repositories {
                google()
                mavenCentral()
                gradlePluginPortal()
              }
            }
            dependencyResolutionManagement {
              repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
              repositories {
                google()
                mavenCentral()
              }
            }
        run: |
          set -e
          FILE=""
          if [ -f "${PROJECT_DIR}/settings.gradle" ]; then FILE="${PROJECT_DIR}/settings.gradle"; fi
          if [ -f "${PROJECT_DIR}/settings.gradle.kts" ]; then FILE="${PROJECT_DIR}/settings.gradle.kts"; fi
          if [ -z "$FILE" ]; then echo "settings file missing"; exit 1; fi

          if ! grep -q "pluginManagement" "$FILE"; then
            tmp="$(mktemp)"
            printf "%s\n%s\n" "$SETTINGS_PATCH" "$(cat "$FILE")" > "$tmp"
            mv "$tmp" "$FILE"
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Install Android cmdline-tools
        shell: bash
        run: |
          set -e
          sudo mkdir -p "$ANDROID_SDK_ROOT"
          sudo chown -R "$USER":"$USER" "$ANDROID_SDK_ROOT"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          URL="https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
          curl -L "$URL" -o /tmp/cmdline-tools.zip
          unzip -q /tmp/cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"

      - name: Prepare Android SDK (licenses + packages)
        shell: bash
        run: |
          set +e
          yes | sdkmanager --licenses > /dev/null
          true
          set -e
          sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Detect Android application module
        id: detect
        shell: bash
        run: |
          set -e
          # ищем build.gradle(.kts) с com.android.application
          CAND="$(grep -Rsl --include=build.gradle --include=build.gradle.kts -E 'com\.android\.application' "$PROJECT_DIR" || true | head -n1)"
          # типичный модуль app — подстраховка
          if [ -z "$CAND" ] && [ -d "$PROJECT_DIR/app" ]; then
            if [ -f "$PROJECT_DIR/app/build.gradle" ] || [ -f "$PROJECT_DIR/app/build.gradle.kts" ]; then
              CAND="$PROJECT_DIR/app/build.gradle"
            fi
          fi
          if [ -z "$CAND" ]; then
            echo "Не нашли модуль приложения"
            ls -R "$PROJECT_DIR"
            exit 1
          fi

          APP_DIR="$(dirname "$CAND")"
          echo "APP_DIR=$APP_DIR" >> "$GITHUB_ENV"

          # вычисляем имя для Gradle-задачи в формате :module:submodule (без python)
          if [ "$APP_DIR" = "$PROJECT_DIR" ]; then
            REL=""
          else
            REL=":${APP_DIR#${PROJECT_DIR}/}"
            REL="${REL//\//:}"
          fi
          echo "GRADLE_MOD=$REL" >> "$GITHUB_ENV"
          echo "Найден модуль: $REL в $APP_DIR"
import os,sys
project=os.environ["PROJECT_DIR"]
app=os.environ["APP_DIR"]
rel=os.path.relpath(app, project)
print("" if rel=="." else ":" + ":".join(rel.split(os.sep)))
PY
)"
          echo "GRADLE_MOD=$REL" >> "$GITHUB_ENV"
          echo "Найден модуль: $REL в $APP_DIR"

      - name: Debug — print gradle files & tree
        shell: bash
        run: |
          set -e
          echo "===== settings.* ====="
          (ls "$PROJECT_DIR"/settings.gradle* && head -n 120 "$PROJECT_DIR"/settings.gradle*) || true
          echo "===== root build.gradle* ====="
          (ls "$PROJECT_DIR"/build.gradle* && head -n 120 "$PROJECT_DIR"/build.gradle*) || true
          echo "===== app build.gradle* ====="
          (ls "$APP_DIR"/build.gradle* && head -n 120 "$APP_DIR"/build.gradle*) || true
          echo "===== tree (2 levels) ====="
          (cd "$PROJECT_DIR" && find . -maxdepth 2 -type f -name "build.gradle*" | sort)

      - name: Assemble Debug APK
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -e
          TASK="assembleDebug"
          if [ -n "${GRADLE_MOD}" ]; then TASK="${GRADLE_MOD}:assembleDebug"; fi
          if [ -f ./gradlew ]; then
            ./gradlew --no-daemon ${TASK} --stacktrace
          else
            gradle --no-daemon ${TASK} --stacktrace
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: ${{ env.PROJECT_DIR }}/**/*.apk
          if-no-files-found: error
