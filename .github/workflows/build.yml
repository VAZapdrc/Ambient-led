name: Build APK from ZIP

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "*.zip"
      - ".github/workflows/build.yml"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure unzip is available
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip

      - name: Unzip Android project
        id: unzip
        shell: bash
        run: |
          set -e
          ZIP="$(find . -maxdepth 1 -type f -name '*.zip' | head -n1)"
          if [ -z "$ZIP" ]; then
            echo "No .zip found in repo root"; exit 1
          fi
          echo "Using ZIP: $ZIP"
          DEST="_src"
          rm -rf "$DEST"
          mkdir -p "$DEST"
          unzip -q "$ZIP" -d "$DEST"

          # если в архиве одна верхняя папка — считаем её корнем
          ROOT="$DEST"
          ONE="$(find "$DEST" -mindepth 1 -maxdepth 1 -type d | head -n1 || true)"
          if [ -n "$ONE" ] && [ "$(find "$DEST" -mindepth 1 -maxdepth 1 | wc -l)" -eq 1 ]; then
            ROOT="$ONE"
          fi

          echo "root=$ROOT" >> "$GITHUB_OUTPUT"
          echo "PROJECT_DIR=$ROOT" >> "$GITHUB_ENV"
          echo "Project root: $ROOT"

      - name: Make gradlew executable (if present)
        shell: bash
        run: |
          if [ -f "${{ steps.unzip.outputs.root }}/gradlew" ]; then
            chmod +x "${{ steps.unzip.outputs.root }}/gradlew"
          fi

      - name: Prepare Gradle settings (create or patch)
        shell: bash
        run: |
          set -e
          PROJECT_DIR="${{ steps.unzip.outputs.root }}"

          # settings.gradle(.kts) в корне проекта?
          FILE=""
          [ -f "$PROJECT_DIR/settings.gradle" ] && FILE="$PROJECT_DIR/settings.gradle"
          [ -f "$PROJECT_DIR/settings.gradle.kts" ] && FILE="$PROJECT_DIR/settings.gradle.kts"

          if [ -z "$FILE" ]; then
            echo "settings.gradle(.kts) not found, creating…"
            # ищем модуль приложения по плагину com.android.application
            CAND="$(grep -Rsl --include=build.gradle --include=build.gradle.kts -E 'com\.android\.application' "$PROJECT_DIR" | head -n1 || true)"
            if [ -z "$CAND" ]; then
              echo "Android application module not found (no com.android.application)"; exit 1
            fi
            APP_DIR="$(dirname "$CAND")"

            # относительный путь APP_DIR от PROJECT_DIR (через однострочный python, чтобы не ломать YAML)
            REL="$(PROJECT_DIR="$PROJECT_DIR" APP_DIR="$APP_DIR" python3 -c 'import os,sys;print(os.path.relpath(os.environ["APP_DIR"], os.environ["PROJECT_DIR"]))')"
            echo "Found app module: $APP_DIR (rel: $REL)"

            FILE="$PROJECT_DIR/settings.gradle"
            cat > "$FILE" <<'EOF'
pluginManagement {
  repositories {
    google()
    mavenCentral()
    gradlePluginPortal()
  }
}
dependencyResolutionManagement {
  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
  repositories {
    google()
    mavenCentral()
  }
}
rootProject.name = "app"
include(":app")
EOF
            # привязываем модуль к настоящей папке
            echo "project(\":app\").projectDir = file(\"$REL\")" >> "$FILE"

            # минимальный корневой build.gradle если его нет
            if [ ! -f "$PROJECT_DIR/build.gradle" ] && [ ! -f "$PROJECT_DIR/build.gradle.kts" ]; then
              cat > "$PROJECT_DIR/build.gradle" <<'EOF'
allprojects {
  repositories {
    google()
    mavenCentral()
  }
}
EOF
            fi
          else
            # settings.* есть — если нет pluginManagement, добавим заголовок с репами
            if ! grep -q "pluginManagement" "$FILE"; then
              TMP="$(mktemp)"
              cat > "$TMP" <<'EOF'
pluginManagement {
  repositories {
    google()
    mavenCentral()
    gradlePluginPortal()
  }
}
dependencyResolutionManagement {
  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
  repositories {
    google()
    mavenCentral()
  }
}
EOF
              cat "$TMP" "$FILE" > "$FILE.new" && mv "$FILE.new" "$FILE"
            fi
            # для старых проектов — добавим allprojects{} в корневой build.gradle*
            for F in "$PROJECT_DIR/build.gradle" "$PROJECT_DIR/build.gradle.kts"; do
              if [ -f "$F" ] && ! grep -q "allprojects" "$F"; then
                cat >>"$F" <<'EOF'
allprojects {
  repositories {
    google()
    mavenCentral()
  }
}
EOF
              fi
            done
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Android SDK (cmdline-tools)
        uses: android-actions/setup-android@v3

      - name: Accept SDK licenses
        shell: bash
        run: yes | sdkmanager --licenses

      - name: Install required SDK packages
        shell: bash
        run: |
          sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Assemble Debug APK
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -e
          if [ -f ./gradlew ]; then
            ./gradlew --no-daemon assembleDebug -x lint -x test --stacktrace
          else
            echo "gradlew not found; installing gradle from apt"
            sudo apt-get update -y && sudo apt-get install -y gradle
            gradle --no-daemon assembleDebug -x lint -x test --stacktrace
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: ${{ env.PROJECT_DIR }}/**/build/outputs/apk/**/*.apk
          if-no-files-found: error
