name: Build APK from ZIP

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "*.zip"
      - ".github/workflows/build.yml"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure unzip is available
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip

      - name: Unzip Android project
        id: unzip
        shell: bash
        run: |
          set -e
          ZIP="$(find . -maxdepth 1 -type f -name '*.zip' | head -n1)"
          if [ -z "$ZIP" ]; then
            echo "No .zip found in repo root"; exit 1
          fi
          echo "Using ZIP: $ZIP"
          DEST="_src"
          rm -rf "$DEST"
          mkdir -p "$DEST"
          unzip -q "$ZIP" -d "$DEST"

          # Определяем корень проекта: если внутри zip одна папка — берём её
          ROOT="$DEST"
          FIRST_DIR="$(find "$DEST" -mindepth 1 -maxdepth 1 -type d | head -n1 || true)"
          if [ -n "$FIRST_DIR" ]; then
            ROOT="$FIRST_DIR"
          fi

          echo "root=$ROOT" >> "$GITHUB_OUTPUT"
          echo "PROJECT_DIR=$ROOT" >> "$GITHUB_ENV"
          echo "Gradle root: $ROOT"

      - name: Make gradlew executable (if present)
        shell: bash
        run: |
          if [ -f "${{ steps.unzip.outputs.root }}/gradlew" ]; then
            chmod +x "${{ steps.unzip.outputs.root }}/gradlew"
          fi

      - name: Patch repositories if missing
        shell: bash
        run: |
          set -e
          PROJECT_DIR="${{ steps.unzip.outputs.root }}"
          FILE=""
          if [ -f "$PROJECT_DIR/settings.gradle" ]; then FILE="$PROJECT_DIR/settings.gradle"; fi
          if [ -f "$PROJECT_DIR/settings.gradle.kts" ]; then FILE="$PROJECT_DIR/settings.gradle.kts"; fi
          if [ -z "$FILE" ]; then echo "settings.gradle(.kts) not found under $PROJECT_DIR"; exit 1; fi

          # Если pluginManagement отсутствует — добавим блоки репозиториев в начало settings.*
          if ! grep -q "pluginManagement" "$FILE"; then
            TMP="$(mktemp)"
            cat > "$TMP" <<'EOF'
          pluginManagement {
            repositories {
              google()
              mavenCentral()
              gradlePluginPortal()
            }
          }
          dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
              google()
              mavenCentral()
            }
          }
          EOF
            cat "$TMP" "$FILE" > "$FILE.new" && mv "$FILE.new" "$FILE"
          fi

          # На всякий случай для старых проектов добавим allprojects{} в корневой build.gradle*
          for F in "$PROJECT_DIR/build.gradle" "$PROJECT_DIR/build.gradle.kts"; do
            if [ -f "$F" ] && ! grep -q "allprojects" "$F"; then
              cat >>"$F" <<'EOF'
          allprojects {
            repositories {
              google()
              mavenCentral()
            }
          }
          EOF
            fi
          done

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Android SDK (cmdline-tools)
        uses: android-actions/setup-android@v3

      - name: Accept SDK licenses
        shell: bash
        run: yes | sdkmanager --licenses

      - name: Install required SDK packages
        shell: bash
        run: |
          sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Assemble Debug APK
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -e
          TASK="assembleDebug"
          if [ -f ./gradlew ]; then
            ./gradlew --no-daemon ${TASK} --stacktrace
          else
            echo "gradlew not found; install gradle from apt"
            sudo apt-get update -y && sudo apt-get install -y gradle
            gradle --no-daemon ${TASK} --stacktrace
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: |
            ${{ env.PROJECT_DIR }}/**/build/outputs/apk/**/*.apk
          if-no-files-found: error
