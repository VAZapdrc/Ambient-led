name: Build APK from ZIP

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure unzip is available
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip

      - name: Unzip Android project
        id: unzip
        shell: bash
        run: |
          set -e
          ZIP="LedLexusBT.zip"
          # если вдруг файл назван иначе — возьмём первый .zip в корне
          if [ ! -f "$ZIP" ]; then ZIP="$(ls -1 *.zip 2>/dev/null | head -n1)"; fi
          if [ -z "$ZIP" ]; then echo "Zip not found"; exit 1; fi
          rm -rf _src
          mkdir _src
          unzip -q "$ZIP" -d _src

          # ищем корень проекта (где settings.gradle*):
          SETTINGS_FILE="$(find _src -maxdepth 3 -type f \( -name settings.gradle -o -name settings.gradle.kts \) | head -n1)"
          if [ -z "$SETTINGS_FILE" ]; then
            echo "settings.gradle(.kts) not found"; exit 1
          fi
          PROJECT_DIR="$(dirname "$SETTINGS_FILE")"
          echo "project_dir=$PROJECT_DIR" >> "$GITHUB_OUTPUT"
          echo "PROJECT_DIR=$PROJECT_DIR" >> "$GITHUB_ENV"

      - name: Make gradlew executable (if present)
        shell: bash
        run: |
          if [ -f "${PROJECT_DIR}/gradlew" ]; then
            chmod +x "${PROJECT_DIR}/gradlew"
          fi

      - name: Patch repositories if missing
        shell: bash
        run: |
          set -e
          # settings.gradle / settings.gradle.kts
          FILE=""
          if [ -f "${PROJECT_DIR}/settings.gradle" ]; then FILE="${PROJECT_DIR}/settings.gradle"; fi
          if [ -f "${PROJECT_DIR}/settings.gradle.kts" ]; then FILE="${PROJECT_DIR}/settings.gradle.kts"; fi
          if [ -z "$FILE" ]; then echo "settings file missing"; exit 1; fi

          if ! grep -q "pluginManagement" "$FILE"; then
            TMP="$(mktemp)"
            cat > "$TMP" << 'EOF'
pluginManagement {
  repositories {
    google()
    mavenCentral()
    gradlePluginPortal()
  }
}
dependencyResolutionManagement {
  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
  repositories {
    google()
    mavenCentral()
  }
}
EOF
            # Вставляем блоки в начало settings.*
            cat "$TMP" "$FILE" > "$FILE.new" && mv "$FILE.new" "$FILE"
          fi

          # Старые проекты иногда требуют allprojects{} в корневом build.gradle
          for F in "${PROJECT_DIR}/build.gradle" "${PROJECT_DIR}/build.gradle.kts"; do
            if [ -f "$F" ] && ! grep -q "allprojects" "$F"; then
              cat >> "$F" << 'EOF'

allprojects {
  repositories {
    google()
    mavenCentral()
  }
}
EOF
            fi
          done

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # На github-runner уже есть Android SDK. Ставим нужные пакеты и принимаем лицензии.
      - name: Prepare Android SDK
        shell: bash
        env:
          ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
          ANDROID_HOME: /usr/local/lib/android/sdk
          PATH: /usr/local/lib/android/sdk/cmdline-tools/latest/bin:/usr/local/lib/android/sdk/platform-tools:/usr/local/lib/android/sdk/tools:$PATH
        run: |
          yes | sdkmanager --licenses
          # Поставим свежие платформу/билд-тулы (можно поменять версии при надобности)
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Assemble Debug APK
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -e
          if [ -f ./gradlew ]; then
            ./gradlew --no-daemon assembleDebug --stacktrace
          else
            gradle --no-daemon assembleDebug --stacktrace
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: |
            ${{ env.PROJECT_DIR }}/**/*.apk
          if-no-files-found: error
